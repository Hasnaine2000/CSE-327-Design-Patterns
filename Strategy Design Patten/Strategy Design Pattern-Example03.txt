// Interface or Abstract Class
class Record
{
public:
    virtual void start_record() = 0;
    virtual void store_field(const string &name, const string &value) = 0;
    virtual void finish_record() = 0;
    virtual ~Record() {}
};


struct ContactData
{
    string first_name, last_name, phone, email;
};

class ContactRecorder
{
public:
    ContactRecorder(Record *a) : m_record(a)
    {
        assert(a != nullptr);
    }
    void store(const ContactData &data)
    {
        assert(m_record != nullptr);
        m_record->start_record();
        m_record->store_field("first name", data.first_name);
        m_record->store_field("last name", data.last_name);
        m_record->store_field("phone", data.phone);
        m_record->store_field("email", data.email);
        m_record->finish_record();
    }
private:
    Record *m_record;
};

class MySql
{
}; // Dummy class for MySQL connection simulation
class DatabaseRecord : public Record
{
public:
    DatabaseRecord() : m_dbConnection(new MySql) {}
    void start_record() override
    {
        cout << "Start transaction" << endl;
    }
   void store_field(const string &name, const string &value)
    {
        cout << "Insert into table: " << name << " = " << value << endl;
    }
   void finish_record()
    {
        cout << "Finish transaction" << endl;
    }
private:
    MySql *m_dbConnection;
};

class StreamRecord : public Record
{
public:
    StreamRecord(ostream &s, const string &record_name = string()) : m_ostream(s), m_record_name(record_name) {}
   void start_record() override
    {
        m_ostream << m_record_name << "( ";
    }    void store_field(const string &name, const string &value) override
    {
        m_ostream << name << ": " << value << "; ";
    }
   void finish_record() override
    {
        m_ostream << ")" << endl;
    }
   void set_record_name(const string &name)
    {
        m_record_name = name;
    }
private:
    ostream &m_ostream;
    string m_record_name;
};

class StreamRecord : public Record
{
public:
    StreamRecord(ostream &s, const string &record_name = string()) : m_ostream(s), m_record_name(record_name) {}
    void start_record() override
    {
        m_ostream << m_record_name << "( ";
    }
    void store_field(const string &name, const string &value) override
    {
        m_ostream << name << ": " << value << "; ";
    }
    void finish_record() override
    {
        m_ostream << ")" << endl;
    }
    void set_record_name(const string &name)
    {
        m_record_name = name;
    }
private:
    ostream &m_ostream;
    string m_record_name;
};
